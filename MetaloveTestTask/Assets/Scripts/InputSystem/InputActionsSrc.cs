//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/Scripts/InputSystem/InputActionsSrc.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActionsSrc: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActionsSrc()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActionsSrc"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""47cd1b2f-5d3b-47e8-bf05-b35da026bde9"",
            ""actions"": [
                {
                    ""name"": ""PointerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""96dd331c-b5e0-4d58-848e-367022650fee"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PointerDown"",
                    ""type"": ""Button"",
                    ""id"": ""00758fb0-da10-486e-a297-a0f2360cc4d1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Touch0Position"",
                    ""type"": ""Value"",
                    ""id"": ""2cd95387-4a07-4f17-aa74-5e949b8a9298"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Touch0Down"",
                    ""type"": ""Button"",
                    ""id"": ""f7b6634a-f0c1-4a60-ba92-e1337d6effb7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Touch1Position"",
                    ""type"": ""Value"",
                    ""id"": ""5489a682-c88c-45e0-99cf-deabf9026cee"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Touch1Down"",
                    ""type"": ""Button"",
                    ""id"": ""6433b28b-8bf6-4cbd-b20b-9faaa974ec74"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseMiddleBtnDown"",
                    ""type"": ""Button"",
                    ""id"": ""1058579e-0085-47ae-a65e-92ae57df1b6d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseScrollY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e727d48d-a26b-41a5-9ff4-f73777841a00"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseMove"",
                    ""type"": ""Value"",
                    ""id"": ""f98efbb0-215b-4a68-8aff-b6b7a7d83a51"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""17ad931f-e8f9-4342-9edb-f508fca4c704"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f29f26bf-5b88-4684-824d-1819a81d386e"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""abc03ed1-3950-494b-b239-b6e9a922f998"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch1Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c2f8792f-eebd-4cf2-a7f6-04da882b743e"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch1Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""43b5fc33-4dc4-4e06-b50f-766c4168c995"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch0Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bbb55a70-6778-4e3b-af8c-8f2b65ed851b"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch0Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53702890-a462-4878-b3ba-6f234bf56e9a"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseMiddleBtnDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3de9855-7269-4ad0-b48c-072b21d588e2"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseScrollY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc1e50f9-a944-45f1-9ffb-65df372b1524"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard"",
            ""id"": ""7bc0f5d3-6d0f-4ad7-b563-bf2da00db5f0"",
            ""actions"": [
                {
                    ""name"": ""Ctrl"",
                    ""type"": ""Button"",
                    ""id"": ""6372ada6-555b-4184-b27c-78ac255d714c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d892ae13-9d29-41d0-9d9c-a8def5984913"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ctrl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_PointerPosition = m_Player.FindAction("PointerPosition", throwIfNotFound: true);
        m_Player_PointerDown = m_Player.FindAction("PointerDown", throwIfNotFound: true);
        m_Player_Touch0Position = m_Player.FindAction("Touch0Position", throwIfNotFound: true);
        m_Player_Touch0Down = m_Player.FindAction("Touch0Down", throwIfNotFound: true);
        m_Player_Touch1Position = m_Player.FindAction("Touch1Position", throwIfNotFound: true);
        m_Player_Touch1Down = m_Player.FindAction("Touch1Down", throwIfNotFound: true);
        m_Player_MouseMiddleBtnDown = m_Player.FindAction("MouseMiddleBtnDown", throwIfNotFound: true);
        m_Player_MouseScrollY = m_Player.FindAction("MouseScrollY", throwIfNotFound: true);
        m_Player_MouseMove = m_Player.FindAction("MouseMove", throwIfNotFound: true);
        // Keyboard
        m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
        m_Keyboard_Ctrl = m_Keyboard.FindAction("Ctrl", throwIfNotFound: true);
    }

    ~@InputActionsSrc()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, InputActionsSrc.Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Keyboard.enabled, "This will cause a leak and performance issues, InputActionsSrc.Keyboard.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_PointerPosition;
    private readonly InputAction m_Player_PointerDown;
    private readonly InputAction m_Player_Touch0Position;
    private readonly InputAction m_Player_Touch0Down;
    private readonly InputAction m_Player_Touch1Position;
    private readonly InputAction m_Player_Touch1Down;
    private readonly InputAction m_Player_MouseMiddleBtnDown;
    private readonly InputAction m_Player_MouseScrollY;
    private readonly InputAction m_Player_MouseMove;
    public struct PlayerActions
    {
        private @InputActionsSrc m_Wrapper;
        public PlayerActions(@InputActionsSrc wrapper) { m_Wrapper = wrapper; }
        public InputAction @PointerPosition => m_Wrapper.m_Player_PointerPosition;
        public InputAction @PointerDown => m_Wrapper.m_Player_PointerDown;
        public InputAction @Touch0Position => m_Wrapper.m_Player_Touch0Position;
        public InputAction @Touch0Down => m_Wrapper.m_Player_Touch0Down;
        public InputAction @Touch1Position => m_Wrapper.m_Player_Touch1Position;
        public InputAction @Touch1Down => m_Wrapper.m_Player_Touch1Down;
        public InputAction @MouseMiddleBtnDown => m_Wrapper.m_Player_MouseMiddleBtnDown;
        public InputAction @MouseScrollY => m_Wrapper.m_Player_MouseScrollY;
        public InputAction @MouseMove => m_Wrapper.m_Player_MouseMove;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @PointerPosition.started += instance.OnPointerPosition;
            @PointerPosition.performed += instance.OnPointerPosition;
            @PointerPosition.canceled += instance.OnPointerPosition;
            @PointerDown.started += instance.OnPointerDown;
            @PointerDown.performed += instance.OnPointerDown;
            @PointerDown.canceled += instance.OnPointerDown;
            @Touch0Position.started += instance.OnTouch0Position;
            @Touch0Position.performed += instance.OnTouch0Position;
            @Touch0Position.canceled += instance.OnTouch0Position;
            @Touch0Down.started += instance.OnTouch0Down;
            @Touch0Down.performed += instance.OnTouch0Down;
            @Touch0Down.canceled += instance.OnTouch0Down;
            @Touch1Position.started += instance.OnTouch1Position;
            @Touch1Position.performed += instance.OnTouch1Position;
            @Touch1Position.canceled += instance.OnTouch1Position;
            @Touch1Down.started += instance.OnTouch1Down;
            @Touch1Down.performed += instance.OnTouch1Down;
            @Touch1Down.canceled += instance.OnTouch1Down;
            @MouseMiddleBtnDown.started += instance.OnMouseMiddleBtnDown;
            @MouseMiddleBtnDown.performed += instance.OnMouseMiddleBtnDown;
            @MouseMiddleBtnDown.canceled += instance.OnMouseMiddleBtnDown;
            @MouseScrollY.started += instance.OnMouseScrollY;
            @MouseScrollY.performed += instance.OnMouseScrollY;
            @MouseScrollY.canceled += instance.OnMouseScrollY;
            @MouseMove.started += instance.OnMouseMove;
            @MouseMove.performed += instance.OnMouseMove;
            @MouseMove.canceled += instance.OnMouseMove;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @PointerPosition.started -= instance.OnPointerPosition;
            @PointerPosition.performed -= instance.OnPointerPosition;
            @PointerPosition.canceled -= instance.OnPointerPosition;
            @PointerDown.started -= instance.OnPointerDown;
            @PointerDown.performed -= instance.OnPointerDown;
            @PointerDown.canceled -= instance.OnPointerDown;
            @Touch0Position.started -= instance.OnTouch0Position;
            @Touch0Position.performed -= instance.OnTouch0Position;
            @Touch0Position.canceled -= instance.OnTouch0Position;
            @Touch0Down.started -= instance.OnTouch0Down;
            @Touch0Down.performed -= instance.OnTouch0Down;
            @Touch0Down.canceled -= instance.OnTouch0Down;
            @Touch1Position.started -= instance.OnTouch1Position;
            @Touch1Position.performed -= instance.OnTouch1Position;
            @Touch1Position.canceled -= instance.OnTouch1Position;
            @Touch1Down.started -= instance.OnTouch1Down;
            @Touch1Down.performed -= instance.OnTouch1Down;
            @Touch1Down.canceled -= instance.OnTouch1Down;
            @MouseMiddleBtnDown.started -= instance.OnMouseMiddleBtnDown;
            @MouseMiddleBtnDown.performed -= instance.OnMouseMiddleBtnDown;
            @MouseMiddleBtnDown.canceled -= instance.OnMouseMiddleBtnDown;
            @MouseScrollY.started -= instance.OnMouseScrollY;
            @MouseScrollY.performed -= instance.OnMouseScrollY;
            @MouseScrollY.canceled -= instance.OnMouseScrollY;
            @MouseMove.started -= instance.OnMouseMove;
            @MouseMove.performed -= instance.OnMouseMove;
            @MouseMove.canceled -= instance.OnMouseMove;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Keyboard
    private readonly InputActionMap m_Keyboard;
    private List<IKeyboardActions> m_KeyboardActionsCallbackInterfaces = new List<IKeyboardActions>();
    private readonly InputAction m_Keyboard_Ctrl;
    public struct KeyboardActions
    {
        private @InputActionsSrc m_Wrapper;
        public KeyboardActions(@InputActionsSrc wrapper) { m_Wrapper = wrapper; }
        public InputAction @Ctrl => m_Wrapper.m_Keyboard_Ctrl;
        public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
        public void AddCallbacks(IKeyboardActions instance)
        {
            if (instance == null || m_Wrapper.m_KeyboardActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeyboardActionsCallbackInterfaces.Add(instance);
            @Ctrl.started += instance.OnCtrl;
            @Ctrl.performed += instance.OnCtrl;
            @Ctrl.canceled += instance.OnCtrl;
        }

        private void UnregisterCallbacks(IKeyboardActions instance)
        {
            @Ctrl.started -= instance.OnCtrl;
            @Ctrl.performed -= instance.OnCtrl;
            @Ctrl.canceled -= instance.OnCtrl;
        }

        public void RemoveCallbacks(IKeyboardActions instance)
        {
            if (m_Wrapper.m_KeyboardActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeyboardActions instance)
        {
            foreach (var item in m_Wrapper.m_KeyboardActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeyboardActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeyboardActions @Keyboard => new KeyboardActions(this);
    public interface IPlayerActions
    {
        void OnPointerPosition(InputAction.CallbackContext context);
        void OnPointerDown(InputAction.CallbackContext context);
        void OnTouch0Position(InputAction.CallbackContext context);
        void OnTouch0Down(InputAction.CallbackContext context);
        void OnTouch1Position(InputAction.CallbackContext context);
        void OnTouch1Down(InputAction.CallbackContext context);
        void OnMouseMiddleBtnDown(InputAction.CallbackContext context);
        void OnMouseScrollY(InputAction.CallbackContext context);
        void OnMouseMove(InputAction.CallbackContext context);
    }
    public interface IKeyboardActions
    {
        void OnCtrl(InputAction.CallbackContext context);
    }
}
